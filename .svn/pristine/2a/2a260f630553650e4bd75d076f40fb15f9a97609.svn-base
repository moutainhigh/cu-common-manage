package com.aotain.common.config;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import com.alibaba.fastjson.JSON;
import com.aotain.common.config.model.CommandSmms;
import com.aotain.common.config.model.ConnectionInformation;
import com.aotain.common.config.model.EuAttributeInfo;
import com.aotain.common.config.model.IdcHouses;
import com.aotain.common.config.redis.BaseRedisService;

/**
 * 获取配置信息相关类
 *
 * @author daiyh@aotain.com
 * @date 2017/11/15
 */
public class LocalConfig {

	/** 环境变量-CU日志存放目录定义 */
	private static final String CU_HOME = "CU_HOME";
	
	private static final String DEFAULT_CONFIG_NAME = "config.properties";
	
    private static LocalConfig localConfig = null;
    
    private String webserviceUrl;
    private String driverClassName;
    private String url;
    private String username;
    private String password;
    private String validationQuery;
    private String clusterId;
    
    @SuppressWarnings("unchecked")
	private BaseRedisService<String, String, String> redisService = ContextUtil.getContext().getBean("baseRedisServiceImpl",BaseRedisService.class);
    private EnvConfig ecfg = ContextUtil.getContext().getBean(EnvConfig.class);

	private LocalConfig() { // 私有化构造器
		/*String env = System.getenv(CU_HOME);
		if (env != null) {
			String configFile = env + File.separator + "config" + File.separator + DEFAULT_CONFIG_NAME;
			InputStream in = null;
			Properties prop = new Properties();  
			try {
				in = new BufferedInputStream (new FileInputStream(configFile));
				prop.load(in); 
				
				webserviceUrl = prop.getProperty("webservice.url");
				driverClassName = prop.getProperty("isms.driverClassName");
				url = prop.getProperty("isms.url");
				username = prop.getProperty("isms.username");
				password = prop.getProperty("isms.password");
				validationQuery = prop.getProperty("isms.validationQuery");
				clusterId = prop.getProperty("isms.clusterId");
				
				in.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					if (in != null) {
						in.close();
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}*/
		webserviceUrl = ecfg.getWebserviceUrl();
		driverClassName = ecfg.getDriverClassName();
		url = ecfg.getUrl();
		username = ecfg.getUsername();
		password = ecfg.getPassword();
		validationQuery = ecfg.getValidationQuery();
		clusterId = ecfg.getClusterId();
		
	}

    public static LocalConfig getInstance() {
        if(localConfig==null){
            synchronized (LocalConfig.class) {
                if(localConfig==null){
                    localConfig =  new LocalConfig();
                }
            }
        }
        return localConfig;
    }

    /**
     * 根据KEY获得value
     * @param hashKey
     * @return
     */
	public String getHashValueByHashKey(String hashKey) {
		return redisService.getHash("idc_jdcm_jkcs_config", hashKey);
	}

    /**
     * 获得kafka消费配置
     * @return
     */
    public Map<String, Object> getKafkaCustomerConf(){
    	Map<String, Object> conf = new HashMap<String, Object>();
    	if (this.clusterId != null) {
    		ConnectionInformation info = getConnectionInformation(clusterId);
        	if (info != null) {
                conf.put("zookeeper.connect", info.getZookeeperConnect() + info.getKafkaPath());
        	}
    	} else {
    		conf.put("zookeeper.connect", getHashValueByHashKey("zookeeper.connect") + getHashValueByHashKey("kafka.path"));
    	}
        conf.put("zookeeper.session.timeout.ms", getHashValueByHashKey("zookeeper.session.timeout.ms"));
        conf.put("zookeeper.sync.time.ms", getHashValueByHashKey("zookeeper.sync.time.ms"));
        conf.put("auto.commit.interval.ms", getHashValueByHashKey("auto.commit.interval.ms"));
        return conf;
    }
    
    /**
     * 获得kafka生产配置
     * @return
     */
    public Map<String, Object> getKafkaProducerConf(){
        Map<String, Object> conf = new HashMap<String, Object>();
        if (this.clusterId != null) {
    		ConnectionInformation info = getConnectionInformation(clusterId);
        	if (info != null) {
        		conf.put("metadata.broker.list", info.getKafkaBrokerList());
        	}
    	} else {
    		conf.put("metadata.broker.list", getHashValueByHashKey("metadata.broker.list"));
    	}
        return conf;
    }
    
    /**
     * 活跃机房编码对应的信息
     * @param houseIdStr	机房编码
     * @return
     */
    public IdcHouses getIdcHouse(String houseIdStr) {
    	String json = redisService.getHash("IdcHouses", houseIdStr);
        return JSON.parseObject(json, IdcHouses.class);
    }
    
    /**
     * 获取机房编码对应的机房信息
     * @param houseIdStr	机房编码
     * @param isReport	是否报备
     * @return
     */
    public IdcHouses getIdcHouse(String houseIdStr, boolean isReport) {
    	IdcHouses idcHouses = getIdcHouse(houseIdStr);
    	if (idcHouses != null) {
    		Integer reportFlag = idcHouses.getIsReport();
    		boolean rIsReport = (reportFlag == 1 ? false : true);
    		if (!(rIsReport == isReport)) {
    			idcHouses = null;
    		}
    	} 
        return idcHouses;
    }
    
    /**
     * 获取所有的已报备的机房信息
     * @return
     */
    public Map<String, IdcHouses> getAllIdcHouses() {
    	return getAllIdcHouses(true);
    }
    
    /**
     * 获取所有未报备或者已报备的机房信息
     * @param isReport 是否报备
     * @return
     */
    public Map<String, IdcHouses> getAllIdcHouses(Boolean isReport) {
    	Map<String, IdcHouses> result = new HashMap<String, IdcHouses>();
    	Map<String, String> temp = redisService.getHashs("IdcHouses");
    	Iterator<String> it = temp.keySet().iterator();
    	while (it.hasNext()) {
    		String houseIdStr = it.next();
    		String json = temp.get(houseIdStr);
    		
    		IdcHouses idcHouses = JSON.parseObject(json, IdcHouses.class);
    		if (idcHouses != null) {
    			Integer reportFlag = idcHouses.getIsReport();
    			boolean rIsReport = (reportFlag == 1 ? false : true);
    			if (isReport != null) {
    				if (rIsReport == isReport) {
        				result.put(houseIdStr, idcHouses);
            		}
    			} else {
    				result.put(houseIdStr, idcHouses);
    			}
    		}
    	}
		return result;
    }

    /**
     * 根据机房ID获得机房编码
     * @param houseId
     * @return
     */
    public String getHouseIdStrByHouseId(Long houseId){
        
        String houseIdStr = "";
        
        Map<String, IdcHouses> allHouse = getAllIdcHouses(null);
        
        for(Entry<String, IdcHouses> entry : allHouse.entrySet()){
            if(entry.getValue().getHouseId().equals(houseId)){
                houseIdStr = entry.getKey();
                break;
            }
        }
        
        return houseIdStr;
    }
    
    /**
     * 获取IdcId的值
     * @return
     */
	public String getIdcId() {
		String idcId = "A2.B1.B2-20090001";
		Map<String, IdcHouses> allHouse = getAllIdcHouses(null);
		Iterator<String> it = allHouse.keySet().iterator();
		while (it.hasNext()) {
			String houseIdStr = it.next();
			IdcHouses idcHouse = allHouse.get(houseIdStr);
			idcId = idcHouse.getIdcId();
			break;
		}
		return idcId;
	}
	
	/**
	 * 根据机房的编码获取机房的ID，长整型值
	 * @param houseIdStr
	 * @return
	 */
	public Long getHouseIdByHouseIdStr(String houseIdStr){
        Long houseId = 0L;
        IdcHouses idcHouse = getIdcHouse(houseIdStr);
        return (idcHouse == null ? houseId : idcHouse.getHouseId());
    }
    
	/**
     * 获取Eu Ip信息
     * @return
     */
    public Map<String, EuAttributeInfo> getAllEuAttributeInfo() {
    	Map<String, EuAttributeInfo> result = new HashMap<String, EuAttributeInfo>();
    	Map<String, String> temp = redisService.getHashs("eu_attribute_info");
    	Iterator<String> it = temp.keySet().iterator();
    	while (it.hasNext()) {
    		String euip = it.next();
    		String json = temp.get(euip);
    		
    		result.put(euip, JSON.parseObject(json, EuAttributeInfo.class));
    	}
		return result;
    }
    /**
     * 根据ip获取对应eu信息
     * @param ip
     * @return
     */
    public EuAttributeInfo getEuAttributeInfoByEuip(String ip){ 
	    String json = redisService.getHash("eu_attribute_info", ip);
	    return JSON.parseObject(json, EuAttributeInfo.class);
    }
    /**
     * 根据ip获取对应eu软件厂商
     * @param ip
     * @return
     */
    public String getSoftwareProviderByEuip(String ip){
    	EuAttributeInfo info = getEuAttributeInfoByEuip(ip);
    	return (info == null ? "" : info.getSoftwareProvider());
    }
    
    
    /**
     * 获取Eu Ip信息
     * @return
     */
    public Map<String, CommandSmms> getAllCommandSmms() {
    	Map<String, CommandSmms> result = new HashMap<String, CommandSmms>();
    	Map<String, String> temp = redisService.getHashs("CommandSmms");
    	Iterator<String> it = temp.keySet().iterator();
    	while (it.hasNext()) {
    		String commandid = it.next();
    		String json = temp.get(commandid);
    		
    		result.put(commandid, JSON.parseObject(json, CommandSmms.class));
    	}
		return result;
    }
    /**
     * 根据ip获取对应eu信息
     * @param ip
     * @return
     */
    public CommandSmms getCommandSmmsByCommandid(String commandid){ 
	    String json = redisService.getHash("CommandSmms", commandid);
	    return JSON.parseObject(json, CommandSmms.class);
    }
    /**
     * 根据commandid获取对应toptaskid
     * @param commandid
     * @return
     */
    public long getToptaskidByCommandid(String commandid){
    	CommandSmms info = getCommandSmmsByCommandid(commandid);
    	return (info == null ? 0l : info.getToptaskid());
    }
    
    public ConnectionInformation getConnectionInformation(String hashField) {
    	String json = redisService.getHash("ClusterHouseConfiguration", hashField);
        return JSON.parseObject(json, ConnectionInformation.class);
    }
    
    /**
     * 根据机房的编码获取Azkaban的url地址
     * @param houseIdStr 机房编码
     * @return
     */
    public String getAzkabanUrlByHouseIdStr(String houseIdStr){
        IdcHouses idcHouse = getIdcHouse(houseIdStr);
        String json = redisService.getHash("ClusterHouseConfiguration", idcHouse.getClusterId() + "");
        ConnectionInformation info = JSON.parseObject(json, ConnectionInformation.class);
        return info.getAzkabanUrl();
    }
    
    /**
     * 根据机房的编码获取机房集群的namenode信息
     * @param houseIdStr 机房编码
     * @return
     */
    public String getNameNodeInfoByHouseIdStr(String houseIdStr){
        IdcHouses idcHouse = getIdcHouse(houseIdStr);
        String json = redisService.getHash("ClusterHouseConfiguration", idcHouse.getClusterId() + "");
        ConnectionInformation info = JSON.parseObject(json, ConnectionInformation.class);
        return info.getNamenodeInfo();
    }

    public String getEventItemFilePath(){
        String json = redisService.getHash("idc_jdcm_jkcs_config","eventitem_file_path");
        return json;
    }
    
    /**
     * 更新IdcHouses
     * @param idcHouses
     */
    public void updateIdcHouse(IdcHouses idcHouse) {
    	if(idcHouse != null && idcHouse.getHouseIdStr() != null){
    		redisService.putHash("IdcHouses", idcHouse.getHouseIdStr(),JSON.toJSONString(idcHouse));
    	}
    }
    
    /**
     * 获取UD1处理线程数
     * @return
     */
    public int getUdCustomerThreadNumer() {
        if (this.clusterId != null) {
    		ConnectionInformation info = getConnectionInformation(clusterId);
    		return info.getUdCustomerThreadNum();
    	} 
    	return Integer.parseInt(getHashValueByHashKey("ud1.customer.threadnum"));
    }
    
    /**
     * 获取zookeeper的连接信息
     * @return
     */
    public String getZookeeperConnect() {
        if (this.clusterId != null) {
    		ConnectionInformation info = getConnectionInformation(clusterId);
    		return info.getZookeeperConnect();
    	} 
    	return getHashValueByHashKey("zookeeper.connect");
    }
    
    public String getZookeeperConnect(String houseIdStr) {
    	if (houseIdStr != null) {
    		IdcHouses idcHouse = getIdcHouse(houseIdStr);
            String json = redisService.getHash("ClusterHouseConfiguration", idcHouse.getClusterId() + "");
            ConnectionInformation info = JSON.parseObject(json, ConnectionInformation.class);
            return info.getZookeeperConnect();
    	}
    	return getHashValueByHashKey("zookeeper.connect");
    }
    
	public String getWebserviceUrl() {
		return webserviceUrl;
	}

	public void setWebserviceUrl(String webserviceUrl) {
		this.webserviceUrl = webserviceUrl;
	}

	public String getDriverClassName() {
		return driverClassName;
	}

	public void setDriverClassName(String driverClassName) {
		this.driverClassName = driverClassName;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getValidationQuery() {
		return validationQuery;
	}

	public void setValidationQuery(String validationQuery) {
		this.validationQuery = validationQuery;
	}

	public String getClusterId() {
		return clusterId;
	}

	public void setClusterId(String clusterId) {
		this.clusterId = clusterId;
	}
    
}
