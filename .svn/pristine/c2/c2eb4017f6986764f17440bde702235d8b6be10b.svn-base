package com.aotain.common.utils;

import java.math.BigInteger;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.aotain.common.utils.model.push.PushMessage;
import com.aotain.common.utils.model.push.SendData;
import com.aotain.common.utils.model.smmscmd.IdcInfoManage;
import com.aotain.common.utils.model.smmscmd.IdcInfoManage.CommandInfo;
import com.aotain.common.utils.push.PushClient;
import com.aotain.common.utils.push.dao.PushMapper;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/spring-base.xml" })
public class PushTest {

	@Autowired
	private PushMapper pmap;
	
	@Autowired
	private PushClient client;
	
	private PushMessage msg = new PushMessage();

	@Test
	public void testDBQuery() {
		System.err.println(pmap.getPushParams());
		System.err.println(pmap.getNextId());
		System.err.println(pmap.getHouseNameById(823L));
		System.err.println(pmap.getUserNameById(621L));
	}

	@Test
	@Transactional   // 标明此方法需使用事务
	@Rollback(true)  // 标明使用完此方法后事务不回滚,true时为回滚
	public void testDBInsert() {
		msg.setPushType(1);
		msg.setSendData("sdfasdfasdfasfas");
		msg.setStatus(1);
		int count = pmap.insertPushMessage(msg);
		System.err.println("insert row count = "+count+",pushId = "+msg.getPushId());
	}
	
	@Test
	@Transactional   
	@Rollback(true)  
	public void testDBUpdate() {
		int count = pmap.updatePushMessageStatus(429420L, 1);
		System.err.println("update row count = "+count+",pushId = "+429420L);
	}
	
	@Test
	@Transactional   
	@Rollback(true)  
	public void testPushMessage(){
		SendData sendData = new SendData();
		sendData.setAlarmHouse("[机房1,机房2]");
		sendData.setContent("系统告警推送测试");
		client.pushMessage(sendData,3);
	}

	@Test
	@Transactional   
	@Rollback(true)  
	public void testPushCommand(){
		IdcInfoManage data = new IdcInfoManage();
		data.setCommandId(123434544L);
		data.setTimestamp("2018-01-12 17:03:22");
		data.setType(BigInteger.ONE);
		
		CommandInfo info = new CommandInfo();
		info.setIdcId("129888888");
		info.getId().add(621L);
		info.setQueryMonitorDayFrom("2018-01-11 17:03:22");
		info.setQueryMonitorDayTo("2018-01-12 17:03:22");
		data.setCommandInfo(info);
		client.pushCommand(1000, JSON.toJSONString(data));
	}
}
